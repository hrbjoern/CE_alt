########################################################
# Plotting: (for the moment)
########################################################

import matplotlib
import matplotlib.pyplot as plt
import numpy as np
import cPickle as pickle


def plotObjects():
    """Plot all the objects coming from ..?"""
    # Open pickle files:
    energies = pickle.load(open('saveE.p'))
    ObjList = pickle.load(open('saveObj.p'))

    # Prepare plot:
    fig1 = plt.figure(1)
    ax1 = fig1.add_subplot(111)
    ax1.set_yscale('log')
    ax1.set_xscale('log')
    ax1.set_ylabel(r'<$\sigma$v>$_{\textrm{UL}}$ (cm$^{3}$s$^{-1}$)')
    ax1.set_xlabel('E (GeV)')
    ax1.set_ylim(1e-24,1e-20)
    ax1.set_xlim(1e2,1e5)
    ax1.yaxis.grid(color='gray', linestyle='dashed')
    ax1.xaxis.grid(color='gray', linestyle='dashed')
    
    #Plot stuff:
    for o in ObjList:
        ax1.plot(energies,o.ul,label=o.Name)

    for o in PubList:
        ax1.plot(o[:,0],o[:,1])

    #Plot Aeffs?
    Aeffs = True
    #Aeffs = False

    if Aeffs:
        plotAeffs(Aeffs=True)
    else:
        plt.legend(loc=3,ncol=2,prop=matplotlib.font_manager.FontProperties(size='small'))
        plt.show()
    
    return 0

def plotAeffs(Aeffs=False):
    """Plot the Aeffs, for comparison"""
    # Open pickle files:
    PubList = pickle.load(open('savePub.p'))

    if Aeffs==False:
        # Prepare plot:
        fig1 = plt.figure(1)
        ax1 = fig1.add_subplot(111)
        ax1.set_yscale('log')
        ax1.set_xscale('log')
        ax1.set_ylabel(r'<$\sigma$v>$_{\textrm{UL}}$ (cm$^{3}$s$^{-1}$)')
        ax1.set_xlabel('E (GeV)')
        ax1.set_ylim(1e-24,1e-20)
        ax1.yaxis.grid(color='gray', linestyle='dashed')
        ax1.xaxis.grid(color='gray', linestyle='dashed')
        
    # Plot stuff:
    for o in PubList:
        ax1.plot(o.energies, o.ul)

    plt.legend(loc=3,ncol=2,prop=matplotlib.font_manager.FontProperties(size='small'))
    plt.show()

## PubList = pickle.load(open('save.p'))
## print PubList

## print '\1'
## print pickle.load(open('save1.p'))
## print '\n2'
## print pickle.load(open('save2.p'))
## print '\n3'
## print pickle.load(open('save3.p'))
